import y from"critters";var w=(...[i={}])=>{Object.entries(i).forEach(([t,e])=>Object.defineProperty(i,t,{value:e===!0?p[t]:i[t]}));const{Action:l,Cache:n,Critters:s,Exclude:u,Logger:c,Path:a}=f(p,i),r=new Set;return typeof a<"u"&&((Array.isArray(a)||a instanceof Set)&&a.forEach(t=>r.add(t)),a instanceof Map&&r.add(a)),{name:"@playform/inline",hooks:{"astro:build:done":async({dir:t})=>{if(r.size===0&&r.add(t),typeof n=="object"&&n.Search===d&&(n.Search=t),!!s)for(let e of r){e=await(await import("@playform/pipe/Target/Function/Apply.js")).default(async o=>o instanceof URL?(await import("url")).fileURLToPath(o):o,e);const m=new y(f(s,{path:e instanceof Map?e.keys().next().value:e,logLevel:(()=>{switch(c){case 0:return"silent";case 1:return"silent";case 2:return"info";default:return"info"}})()}));await(await(await(await new(await import("@playform/pipe")).default(n,c).In(e)).By("**/*.html")).Not(u)).Pipe(f(l,{Wrote:async({Buffer:o})=>m.process(o.toString())}))}}}}};const{default:p}=await import("../Variable/Option.js"),{default:{Cache:{Search:d}}}=await import("@playform/pipe/Target/Variable/Option.js"),{default:f}=await import("./Merge.js");export{p as Default,f as Merge,d as Search,w as default};
