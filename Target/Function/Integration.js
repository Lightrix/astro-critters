import h from"critters";var w=(...[r={}])=>{Object.entries(r).forEach(([t,e])=>Object.defineProperty(r,t,{value:e===!0?p[t]:r[t]}));const{Action:l,Cache:i,Critters:f,Exclude:u,Logger:c,Path:o}=n(p,r),s=new Set;return typeof o<"u"&&(Array.isArray(o)||o instanceof Set)&&o.forEach(t=>s.add(t)),{name:"astro-critters",hooks:{"astro:build:done":async({dir:t})=>{if(s.size||s.add(t),typeof i=="object"&&i.Search===m&&(i.Search=t),!!f)for(let e of s){e=await(await import("files-pipe/Target/Function/Apply.js")).default(async a=>a instanceof URL?(await import("url")).fileURLToPath(a):a,e);const y=new h(n(f,{path:e instanceof Map?e.keys().next().value:e,logLevel:(()=>{switch(c){case 0:return"silent";case 1:return"silent";case 2:return"info";default:return"info"}})()}));await(await(await(await new(await import("files-pipe")).default(i,c).In(e)).By("**/*.html")).Not(u)).Pipe(n(l,{Wrote:async({Buffer:a})=>y.process(a.toString())}))}}}}};const{default:p}=await import("../Variable/Option.js"),{default:{Cache:{Search:m}}}=await import("files-pipe/Target/Variable/Option.js"),{default:n}=await import("../Function/Merge.js");export{p as Default,n as Merge,m as Search,w as default};
