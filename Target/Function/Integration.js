import h from"critters";var w=(...[r={}])=>{Object.entries(r).forEach(([t,e])=>Object.defineProperty(r,t,{value:e===!0?p[t]:r[t]}));const{Action:l,Cache:o,Critters:s,Exclude:u,Logger:c,Path:i}=f(p,r),n=new Set;return typeof i<"u"&&(Array.isArray(i)||i instanceof Set)&&i.forEach(t=>n.add(t)),{name:"astro-critters",hooks:{"astro:build:done":async({dir:t})=>{if(n.size===0&&n.add(t),typeof o=="object"&&o.Search===y&&(o.Search=t),!!s)for(let e of n){e=await(await import("@playform/pipe/Target/Function/Apply.js")).default(async a=>a instanceof URL?(await import("url")).fileURLToPath(a):a,e);const m=new h(f(s,{path:e instanceof Map?e.keys().next().value:e,logLevel:(()=>{switch(c){case 0:return"silent";case 1:return"silent";case 2:return"info";default:return"info"}})()}));await(await(await(await new(await import("@playform/pipe")).default(o,c).In(e)).By("**/*.html")).Not(u)).Pipe(f(l,{Wrote:async({Buffer:a})=>m.process(a.toString())}))}}}}};const{default:p}=await import("../Variable/Option.js"),{default:{Cache:{Search:y}}}=await import("@playform/pipe/Target/Variable/Option.js"),{default:f}=await import("./Merge.js");export{p as Default,f as Merge,y as Search,w as default};
