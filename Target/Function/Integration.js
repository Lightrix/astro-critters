import m from"critters";var w=(...[r={}])=>{Object.entries(r).forEach(([t,e])=>Object.defineProperty(r,t,{value:e===!0?c[t]:r[t]}));const{Action:l,Cache:o,Critters:s,Exclude:y,Logger:p,Path:i}=f(c,r),n=new Set;return typeof i<"u"&&(Array.isArray(i)||i instanceof Set)&&i.forEach(t=>n.add(t)),{name:"@playform/inline",hooks:{"astro:build:done":async({dir:t})=>{if(n.size||n.add(t),typeof o=="object"&&o.Search===h&&(o.Search=t),!!s)for(let e of n){e=await(await import("@playform/pipe/Target/Function/Apply.js")).default(async a=>a instanceof URL?(await import("url")).fileURLToPath(a):a,e);const u=new m(f(s,{path:e instanceof Map?e.keys().next().value:e,logLevel:(()=>{switch(p){case 0:return"silent";case 1:return"silent";case 2:return"info";default:return"info"}})()}));await(await(await(await new(await import("@playform/pipe")).default(o,p).In(e)).By("**/*.html")).Not(y)).Pipe(f(l,{Wrote:async({Buffer:a})=>u.process(a.toString())}))}}}}};const{default:c}=await import("../Variable/Option.js"),{default:{Cache:{Search:h}}}=await import("@playform/pipe/Target/Variable/Option.js"),{default:f}=await import("./Merge.js");export{c as Default,f as Merge,h as Search,w as default};
