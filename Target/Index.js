const{default:n}=await import("./Object/Option.js"),{default:s}=await import("files-pipe/Target/Function/Merge.js");var c=(a={})=>{for(const e in a)Object.prototype.hasOwnProperty.call(a,e)&&a[e]===!0&&(a[e]=n[e]);const t=s(n,a),o=new Set;if(typeof t.Path<"u"&&(t.Path instanceof Array||t.Path instanceof Set))for(const e of t.Path)o.add(e);return{name:"astro-critters",hooks:{"astro:build:done":async({dir:e})=>{if(o.size||o.add(e),!!t.Critters)for(const f of o){const i=await(await import("files-pipe/Target/Function/Apply.js")).default(async r=>r instanceof URL?(await import("url")).fileURLToPath(r):r,f);await(await(await(await new(await import("files-pipe")).default(t.Cache,t.Logger).In(f)).By("**/*.html")).Not(t.Exclude)).Pipe(s(n.Action,{Wrote:async r=>new(await import("critters"))(s(t.Critters,{path:i instanceof Map?i.keys().next().value:i,logLevel:(()=>{switch(t.Logger){case 0:return"silent";case 1:return"silent";case 2:return"info";default:return"info"}})()})).process(r.Buffer.toString())}))}}}}};export{n as Default,s as Merge,c as default};
